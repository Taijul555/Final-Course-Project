@page "/fares/Add"
@inject HttpClient http
@inject ISnackbar snackbar
<MudCard class="form-card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add ticket fare</MudText>
        </CardHeaderContent>

    </MudCardHeader>
    <MudCardContent>
        <EditForm Model="@fare" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInValidSubmit">
            <ObjectGraphDataAnnotationsValidator />
            <div class="c-2">
                
                <MudSelect @ref="mudSelect" @bind-Value="fare.BusRouteId" T="int" Label="Bus route" Variant="Variant.Text">
                    @if(this.routes is not null)
                    {
                        @foreach (var item in routes)
                        {
                            <MudSelectItem Value="@item.BusRouteId">@item.RouteName</MudSelectItem>
                        }
                    }
                    
                    <MudSelectItem Value="0">Select one</MudSelectItem>
                    
                </MudSelect>
                <MudSelect @bind-Value="fare.BusType" Label="Bus type" AdornmentColor="Color.Secondary">
                    @foreach (BusType item in Enum.GetValues(typeof(BusType)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }

                </MudSelect>
            </div>
            <div>
                @foreach(var s in fare.SeatFares)
                {
                    <div class="c-2-auto">
                        <MudTextField Label="Fare"
                        @bind-Value="s.SeatFare" For="@(() => s.SeatFare)" />

                        <MudTextField Label="Fare" Disabled="true"
                        @bind-Value="s.FareType" For="@(() => s.FareType)" />
                    <MudCheckBox @bind-Checked="@s.IsActive" Label="Current"></MudCheckBox>
                    </div>
                }
            </div>
            <div class="c-2">
                <span></span>
                <div style="text-align:right">
                    
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </div>

            </div> 
        </EditForm>
    </MudCardContent>
</MudCard>
@* <div>@JsonSerializer.Serialize(this.fare)</div> *@
@code {
    private FareInputModel fare = new() {BusType= BusType.NonAc};
    List<BusRouteViewModel> routes = null!;
    MudSelect<int> mudSelect = null!;
    private async void HandleValidSubmit(EditContext editContext)
    {

        if(this.fare.SeatFares.Where(x=> x.IsActive).Count()> 1)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Only one fare should be active.", Severity.Warning);
            return;
        }
        if(!this.fare.SeatFares.Any(x => x.IsActive))
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("One fare must be active.", Severity.Warning);
            return;
        }
        await Save();
    }
    private async void HandleInValidSubmit(EditContext editContext)
    {
        if (this.mudSelect.Value == 0)
        {
            await this.mudSelect.FocusAsync();
            //this.mudSelect.ErrorText = "Select one";
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Route not selected", Severity.Warning);
        }

    }
    protected override async Task OnInitializedAsync()
    {
        var data = await this.http.GetFromJsonAsync<List<BusRouteViewModel>>("/api/BusRoutes/VM");
        if(data is null)
        {
               //let go
        }
        else
        {
            routes = data;
        }
        this.fare.SeatFares.Add(new SeatFareInputModel { FareType=FareType.Regular });
        this.fare.SeatFares.Add(new SeatFareInputModel { FareType = FareType.PickSeason });
        this.fare.SeatFares.Add(new SeatFareInputModel { FareType = FareType.Special });

    }
    private async Task Save()
    {
        
        var response = await this.http.PostAsJsonAsync<FareInputModel>("/api/Fares/VM", this.fare);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            this.fare = new() { BusType = BusType.NonAc };
            this.fare.SeatFares.Add(new SeatFareInputModel { FareType = FareType.Regular });
            this.fare.SeatFares.Add(new SeatFareInputModel { FareType = FareType.PickSeason });
            this.fare.SeatFares.Add(new SeatFareInputModel { FareType = FareType.Special });
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
    
}
