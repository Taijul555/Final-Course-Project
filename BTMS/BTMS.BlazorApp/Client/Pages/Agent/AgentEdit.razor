@page "/agents/edit/{id:int}"
@inject HttpClient http
@inject ISnackbar snackbar

<MudCard class="form-card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Edit Agent Information</MudText>
        </CardHeaderContent>

    </MudCardHeader>
    <MudCardContent>
        @if (agent is null)
        {
            <ProgressIndicator />
        }
        else
        {
            <EditForm Model="@agent" OnSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="c-2">
                    <MudTextField Label="Name"
                                  @bind-Value="agent.Name" For="@(() => agent.Name)" />
                    <MudTextField Label="Email"
                                  @bind-Value="agent.Email" />
                </div>
                <div class="col-2">

                    <MudTextField Label="Phone Number"
                                  @bind-Value="agent.PhoneNumber" For="@(() => agent.PhoneNumber)" />
                    <MudTextField Label="Address"
                                  @bind-Value="agent.Address" For="@(() => agent.Address)" />
                </div>

                <div class="c-2">
                    <span></span>
                    <div style="text-align:right">
                        @* <button type="submit">Save</button> *@
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    </div>

                </div>
            </EditForm>
        }
    </MudCardContent>
</MudCard>


@code {
    [Parameter]
    public int id { get; set; }
    private Agent agent { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var data = await this.http.GetFromJsonAsync<Agent>($"/api/Agents/{id}");
        if (data is null)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to load Agents.", Severity.Error);
        }
        else
        {
            this.agent = data;
        }
    }
    private async void HandleValidSubmit(EditContext editContext)
    {

        await this.Save();

    }
    private async Task Save()
    {
        var response = await this.http.PutAsJsonAsync<Agent>($"/api/Agents/{id}", this.agent);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);


        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}
