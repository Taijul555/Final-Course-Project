@page "/buses/edit/{id:int}"
@inject HttpClient http
@inject ISnackbar snackbar
<MudCard class="form-card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Edit Bus Information</MudText>
        </CardHeaderContent>

    </MudCardHeader>
    <MudCardContent>
        @if(bus is null)
        {
            <ProgressIndicator />
        }
        else
        {
            <EditForm Model="@bus" OnSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="c-2">
                    <MudTextField Label="Bus name"
                    @bind-Value="bus.Name" For="@(() => bus.Name)" />
                    <MudTextField Label="Bus number"
                    @bind-Value="bus.Number" For="@(() => bus.Number)" />
                </div>
                <div class="c-2">
                    <MudSelect @bind-Value="bus.BusType" Label="Bus type" AdornmentColor="Color.Secondary">
                        @foreach (BusType item in Enum.GetValues(typeof(BusType)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }

                    </MudSelect>
                    <MudTextField Label="Capacity"
                    @bind-Value="bus.Capacity" For="@(() => bus.Capacity)" />
                </div>
                <div class="c-2">
                    <span></span>
                    <div style="text-align:right">
                        @* <button type="submit">Save</button> *@
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                    </div>

                </div>
            </EditForm>
        }
    </MudCardContent>
</MudCard>
@code {
    [Parameter]
    public int id { get; set; }
    private Bus bus { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        var data = await this.http.GetFromJsonAsync<Bus>($"/api/Buses/{id}");
        if(data is null)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to load bus.", Severity.Error);
        }
        else
        {
            this.bus = data;
        }
    }
    private async void HandleValidSubmit(EditContext editContext)
    {

        await this.Save();

    }
    private async Task Save()
    {
        var response = await this.http.PutAsJsonAsync<Bus>($"/api/Buses/{id}", this.bus);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            
            
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}
