@page "/pages/busroutes/add"
@inject HttpClient http
@inject ISnackbar snackbar
<MudCard class="form-card">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Create new bus</MudText>
        </CardHeaderContent>

    </MudCardHeader>
    <MudCardContent>
        <EditForm Model="@busRoute" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="c-2">
                <MudTextField Label="From"
                @bind-Value="busRoute.From" For="@(() => busRoute.From)" />
                <MudTextField Label="To"
                @bind-Value="busRoute.To" For="@(() => busRoute.To)" />
            </div>
            <div class="c-2">
                <MudTextField Label="Appox. Distance"
                @bind-Value="busRoute.ApproximateDistance" For="@(() => busRoute.ApproximateDistance)" />
                <MudTextField Label="Journy Hour"
                @bind-Value="busRoute.ApproximateJourneyHour" For="@(() => busRoute.ApproximateJourneyHour)" />
            </div>
            <div class="col-2">
                <span></span>
                <div style="text-align:right">
                    @* <button type="submit">Save</button> *@
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </div>

            </div>
        </EditForm>
    </MudCardContent>
</MudCard>

@code {
    private BusRoute busRoute = new() { ApproximateDistance=null, ApproximateJourneyHour=null };
    private async void HandleValidSubmit(EditContext editContext)
    {

        await this.Save();

    }
    private async Task Save()
    {
        var response = await this.http.PostAsJsonAsync<BusRoute>("/api/BusRoutes", this.busRoute);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            this.busRoute = new() { ApproximateDistance = null, ApproximateJourneyHour = null }; 
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}
